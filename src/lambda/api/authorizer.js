"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const talis_node_1 = require("talis-node");
// Constants used by parseMethodArn:
//
// Example MethodARN:
//   "arn:aws:execute-api:<Region id>:<Account id>:<API id>/<Stage>/<Method>/<Resource path>"
// Method ARN Index:  0   1   2           3           4            5
// API Gateway ARN Index:                                          0        1       2        3
//
//
const ARN_INDEX = 0;
const AWS_INDEX = 1;
const EXECUTE_INDEX = 2;
const REGION_INDEX = 3;
const ACCOUNT_ID_INDEX = 4;
const API_GATEWAY_ARN_INDEX = 5;
const METHOD_ARN_INDEXES = [
    ARN_INDEX,
    AWS_INDEX,
    EXECUTE_INDEX,
    REGION_INDEX,
    ACCOUNT_ID_INDEX,
    API_GATEWAY_ARN_INDEX,
];
const API_ID_INDEX = 0;
const STAGE_INDEX = 1;
const METHOD_INDEX = 2;
const RESOURCE_PATH_INDEX = 3;
const API_GATEWAY_ARN_INDEXES = [
    API_ID_INDEX,
    STAGE_INDEX,
    METHOD_INDEX,
    RESOURCE_PATH_INDEX,
];
class PersonaAuthorizer {
    constructor(event, context) {
        this.event = event;
        this.context = context;
        this.personaClient = undefined;
    }
    async handle() {
        var _a;
        console.log("Received event", this.event);
        if (!((_a = this.event) === null || _a === void 0 ? void 0 : _a.headers) || this.event.headers["authorization"] == null) {
            console.log("Missing auth token");
            return this.context.fail("Unauthorized");
        }
        const parsedMethodArn = this.parseMethodArn(this.event.routeArn);
        console.log(`Parsed Method Arn: ${JSON.stringify(parsedMethodArn)}`);
        const scope = this.getScope(parsedMethodArn);
        console.log(`Method has scope: ${scope}`);
        let validationOpts = {
            token: _.replace(this.event.headers["authorization"], "Bearer", "").trim(),
        };
        if (scope != null) {
            validationOpts = _.merge(validationOpts, { scope });
        }
        console.log(`Validation ops: ${JSON.stringify(validationOpts)}`);
        console.log("validating token against request", `${parsedMethodArn.resourcePath}`);
        if (!validationOpts.token || validationOpts.token.length === 0) {
            console.log("token missing");
            return this.context.fail("Unauthorized");
        }
        try {
            const token = await this.validateToken(validationOpts);
            const success = {
                isAuthorized: true,
                context: {
                    clientId: token["sub"],
                },
            };
            return this.context.succeed(success);
        }
        catch (err) {
            console.log("token validation failed", err);
            const error = err;
            if (error.error === talis_node_1.persona.errorTypes.INSUFFICIENT_SCOPE) {
                const insufficientScope = {
                    isAuthorized: false,
                    context: {
                        description: "Insufficient Scope",
                        clientId: (error === null || error === void 0 ? void 0 : error.token) ? error.token["sub"] : "",
                    },
                };
                return this.context.succeed(insufficientScope);
            }
            const failure = {
                isAuthorized: false,
                context: {
                    clientId: (error === null || error === void 0 ? void 0 : error.token) ? error.token["sub"] : "",
                },
            };
            return this.context.succeed(failure);
        }
    }
    validateToken(validationOpts) {
        const client = this.getPersonaClient();
        return new Promise(function (resolve, reject) {
            client.validateToken(validationOpts, (error, ok, decodedToken) => {
                if (error) {
                    reject({
                        error: error,
                        token: decodedToken,
                    });
                }
                resolve(decodedToken);
            });
        });
    }
    /**
     * Break down an API gateway method ARN into it's constituent parts.
     * Method ARNs take the following format:
     *
     *   arn:aws:execute-api:<Region id>:<Account id>:<API id>/<Stage>/<Method>/<Resource path>
     *
     * e.g:
     *
     *   arn:aws:execute-api:eu-west-1:123:abc/development/GET/2/works
     *
     * @param methodArn {string} The method ARN provided by the event handed to a Lambda function
     * @returns {{
     *   method: string,
     *   resourcePath: string,
     *   apiOptions: {
     *     region: string,
     *     restApiId: string,
     *     stage: string
     *   },
     *   awsAccountId: string
     *   }}
     */
    parseMethodArn(methodArn) {
        const methodArnParts = methodArn.split(":");
        console.log(`Method ARN Parts: ${JSON.stringify(methodArnParts)}`);
        let apiGatewayArn = methodArnParts[API_GATEWAY_ARN_INDEX];
        // If the split created more than the expected number of parts, then the
        // apiGatewayArn must have had one or more :'s in it. Recreate the apiGateway arn.
        for (let index = METHOD_ARN_INDEXES.length; index < methodArnParts.length; index += 1) {
            apiGatewayArn += `:${methodArnParts[index]}`;
        }
        const apiGatewayArnParts = apiGatewayArn.split("/");
        console.log(`api gateway arn parts: ${JSON.stringify(apiGatewayArnParts)}`);
        // If the split created more than the expected number of parts, then the
        // resource path must have had one or more /'s in it. Recreate the resource path.
        let resourcePath = "";
        for (let i = API_GATEWAY_ARN_INDEXES.length - 1; i < apiGatewayArnParts.length; i += 1) {
            resourcePath += `/${apiGatewayArnParts[i]}`;
        }
        console.log(`resource path: ${JSON.stringify(resourcePath)}`);
        return {
            method: apiGatewayArnParts[METHOD_INDEX],
            resourcePath,
            apiOptions: {
                region: methodArnParts[REGION_INDEX],
                restApiId: apiGatewayArnParts[API_ID_INDEX],
                stage: apiGatewayArnParts[STAGE_INDEX],
            },
            awsAccountId: methodArnParts[ACCOUNT_ID_INDEX],
        };
    }
    getScope(parsedMethodArn) {
        const scopeConfig = process.env["SCOPE_CONFIG"];
        if (scopeConfig != undefined) {
            const conf = JSON.parse(scopeConfig);
            for (const path of Object.keys(conf)) {
                console.log(`Looping: path: ${path} parsedMethodArn.resourcePath: ${parsedMethodArn.resourcePath}`);
                if (this.pathMatch(path, parsedMethodArn.resourcePath)) {
                    console.log(`Scope required: ${conf[path]}`);
                    return conf[path];
                }
            }
        }
        console.log('No scope');
        return null;
    }
    getPersonaClient() {
        if (this.personaClient == null) {
            const personaConfig = {
                persona_host: process.env["PERSONA_HOST"],
                persona_scheme: process.env["PERSONA_SCHEME"],
                persona_port: process.env["PERSONA_PORT"],
                persona_oauth_route: process.env["PERSONA_OAUTH_ROUTE"],
            };
            this.personaClient = talis_node_1.persona.createClient(`${process.env["PERSONA_CLIENT_NAME"]} (lambda; NODE_ENV=${process.env["NODE_ENV"]})`, _.merge(personaConfig, {}));
        }
        return this.personaClient;
    }
    pathMatch(pathDefination, path) {
        const pathDefinationParts = pathDefination.split('/');
        const pathParts = pathDefination.split('/');
        if (pathDefinationParts.length != pathParts.length) {
            return false;
        }
        for (let i = 0; i < pathDefinationParts.length; i++) {
            const pathDefinitionSegment = pathDefinationParts[i];
            const pathSegment = pathParts[i];
            if (pathDefination.startsWith('{') && pathDefination.endsWith('}')) {
                // Matches path argument
            }
            else {
                // Should match directly
                if (pathDefinitionSegment !== pathSegment) {
                    return false;
                }
            }
        }
        return true;
    }
}
module.exports.validateToken = async (event, context) => {
    const route = new PersonaAuthorizer(event, context);
    return await route.handle();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGhvcml6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0QkFBNEI7QUFDNUIsMkNBQW9EO0FBZ0JwRCxvQ0FBb0M7QUFDcEMsRUFBRTtBQUNGLHFCQUFxQjtBQUNyQiw2RkFBNkY7QUFDN0Ysb0VBQW9FO0FBQ3BFLDhGQUE4RjtBQUM5RixFQUFFO0FBQ0YsRUFBRTtBQUNGLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNwQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDcEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUMzQixNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQztBQUVoQyxNQUFNLGtCQUFrQixHQUFHO0lBQ3pCLFNBQVM7SUFDVCxTQUFTO0lBQ1QsYUFBYTtJQUNiLFlBQVk7SUFDWixnQkFBZ0I7SUFDaEIscUJBQXFCO0NBQ3RCLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3RCLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQztBQUN2QixNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUU5QixNQUFNLHVCQUF1QixHQUFHO0lBQzlCLFlBQVk7SUFDWixXQUFXO0lBQ1gsWUFBWTtJQUNaLG1CQUFtQjtDQUNwQixDQUFDO0FBRUYsTUFBTSxpQkFBaUI7SUFLckIsWUFBWSxLQUFVLEVBQUUsT0FBWTtRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUV2QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU07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Q0FBQyxDQUFDO0lBQ3BELE9BQU8sTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDOUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBwZXJzb25hLCBQZXJzb25hQ2xpZW50IH0gZnJvbSBcInRhbGlzLW5vZGVcIjtcbmltcG9ydCB7IHBhdGhUb1JlZ2V4cCwgbWF0Y2gsIHBhcnNlLCBjb21waWxlIH0gZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5pbXBvcnQge2ludGVnZXJ9IGZyb20gXCJhd3Mtc2RrL2NsaWVudHMvY2xvdWRmcm9udFwiO1xuXG5cbnR5cGUgUGFyc2VkQXJuID0ge1xuICBtZXRob2Q6IHN0cmluZztcbiAgcmVzb3VyY2VQYXRoOiBzdHJpbmc7XG4gIGFwaU9wdGlvbnM6IHtcbiAgICByZWdpb246IHN0cmluZztcbiAgICByZXN0QXBpSWQ6IHN0cmluZztcbiAgICBzdGFnZTogc3RyaW5nO1xuICB9O1xuICBhd3NBY2NvdW50SWQ6IHN0cmluZztcbn07XG5cbi8vIENvbnN0YW50cyB1c2VkIGJ5IHBhcnNlTWV0aG9kQXJuOlxuLy9cbi8vIEV4YW1wbGUgTWV0aG9kQVJOOlxuLy8gICBcImFybjphd3M6ZXhlY3V0ZS1hcGk6PFJlZ2lvbiBpZD46PEFjY291bnQgaWQ+OjxBUEkgaWQ+LzxTdGFnZT4vPE1ldGhvZD4vPFJlc291cmNlIHBhdGg+XCJcbi8vIE1ldGhvZCBBUk4gSW5kZXg6ICAwICAgMSAgIDIgICAgICAgICAgIDMgICAgICAgICAgIDQgICAgICAgICAgICA1XG4vLyBBUEkgR2F0ZXdheSBBUk4gSW5kZXg6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCAgICAgICAgMSAgICAgICAyICAgICAgICAzXG4vL1xuLy9cbmNvbnN0IEFSTl9JTkRFWCA9IDA7XG5jb25zdCBBV1NfSU5ERVggPSAxO1xuY29uc3QgRVhFQ1VURV9JTkRFWCA9IDI7XG5jb25zdCBSRUdJT05fSU5ERVggPSAzO1xuY29uc3QgQUNDT1VOVF9JRF9JTkRFWCA9IDQ7XG5jb25zdCBBUElfR0FURVdBWV9BUk5fSU5ERVggPSA1O1xuXG5jb25zdCBNRVRIT0RfQVJOX0lOREVYRVMgPSBbXG4gIEFSTl9JTkRFWCxcbiAgQVdTX0lOREVYLFxuICBFWEVDVVRFX0lOREVYLFxuICBSRUdJT05fSU5ERVgsXG4gIEFDQ09VTlRfSURfSU5ERVgsXG4gIEFQSV9HQVRFV0FZX0FSTl9JTkRFWCxcbl07XG5cbmNvbnN0IEFQSV9JRF9JTkRFWCA9IDA7XG5jb25zdCBTVEFHRV9JTkRFWCA9IDE7XG5jb25zdCBNRVRIT0RfSU5ERVggPSAyO1xuY29uc3QgUkVTT1VSQ0VfUEFUSF9JTkRFWCA9IDM7XG5cbmNvbnN0IEFQSV9HQVRFV0FZX0FSTl9JTkRFWEVTID0gW1xuICBBUElfSURfSU5ERVgsXG4gIFNUQUdFX0lOREVYLFxuICBNRVRIT0RfSU5ERVgsXG4gIFJFU09VUkNFX1BBVEhfSU5ERVgsXG5dO1xuXG5jbGFzcyBQZXJzb25hQXV0aG9yaXplciB7XG4gIGV2ZW50OiBhbnk7XG4gIGNvbnRleHQ6IGFueTtcbiAgcGVyc29uYUNsaWVudDogUGVyc29uYUNsaWVudCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihldmVudDogYW55LCBjb250ZXh0OiBhbnkpIHtcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgIHRoaXMucGVyc29uYUNsaWVudCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGV2ZW50XCIsIHRoaXMuZXZlbnQpO1xuXG4gICAgaWYgKCF0aGlzLmV2ZW50Py5oZWFkZXJzIHx8IHRoaXMuZXZlbnQuaGVhZGVyc1tcImF1dGhvcml6YXRpb25cIl0gPT0gbnVsbCkge1xuICAgICAgY29uc29sZS5sb2coXCJNaXNzaW5nIGF1dGggdG9rZW5cIik7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmZhaWwoXCJVbmF1dGhvcml6ZWRcIik7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkTWV0aG9kQXJuID0gdGhpcy5wYXJzZU1ldGhvZEFybih0aGlzLmV2ZW50LnJvdXRlQXJuKTtcbiAgICBjb25zb2xlLmxvZyhgUGFyc2VkIE1ldGhvZCBBcm46ICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkTWV0aG9kQXJuKX1gKTtcblxuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5nZXRTY29wZShwYXJzZWRNZXRob2RBcm4pO1xuICAgIGNvbnNvbGUubG9nKGBNZXRob2QgaGFzIHNjb3BlOiAke3Njb3BlfWApO1xuXG4gICAgbGV0IHZhbGlkYXRpb25PcHRzID0ge1xuICAgICAgdG9rZW46IF8ucmVwbGFjZShcbiAgICAgICAgdGhpcy5ldmVudC5oZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSxcbiAgICAgICAgXCJCZWFyZXJcIixcbiAgICAgICAgXCJcIlxuICAgICAgKS50cmltKCksXG4gICAgfTtcbiAgICBpZiAoc2NvcGUgIT0gbnVsbCkge1xuICAgICAgdmFsaWRhdGlvbk9wdHMgPSBfLm1lcmdlKHZhbGlkYXRpb25PcHRzLCB7IHNjb3BlIH0pO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgVmFsaWRhdGlvbiBvcHM6ICR7SlNPTi5zdHJpbmdpZnkodmFsaWRhdGlvbk9wdHMpfWApO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICBcInZhbGlkYXRpbmcgdG9rZW4gYWdhaW5zdCByZXF1ZXN0XCIsXG4gICAgICBgJHtwYXJzZWRNZXRob2RBcm4ucmVzb3VyY2VQYXRofWBcbiAgICApO1xuXG4gICAgaWYgKCF2YWxpZGF0aW9uT3B0cy50b2tlbiB8fCB2YWxpZGF0aW9uT3B0cy50b2tlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKFwidG9rZW4gbWlzc2luZ1wiKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZmFpbChcIlVuYXV0aG9yaXplZFwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLnZhbGlkYXRlVG9rZW4odmFsaWRhdGlvbk9wdHMpO1xuICAgICAgY29uc3Qgc3VjY2VzcyA9IHtcbiAgICAgICAgaXNBdXRob3JpemVkOiB0cnVlLFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgY2xpZW50SWQ6IHRva2VuW1wic3ViXCJdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc3VjY2VlZChzdWNjZXNzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwidG9rZW4gdmFsaWRhdGlvbiBmYWlsZWRcIiwgZXJyKTtcblxuICAgICAgY29uc3QgZXJyb3IgPSBlcnIgYXMgeyBlcnJvcjogYW55OyB0b2tlbjogUmVjb3JkPHN0cmluZywgYW55PiB9O1xuXG4gICAgICBpZiAoZXJyb3IuZXJyb3IgPT09IHBlcnNvbmEuZXJyb3JUeXBlcy5JTlNVRkZJQ0lFTlRfU0NPUEUpIHtcbiAgICAgICAgY29uc3QgaW5zdWZmaWNpZW50U2NvcGUgPSB7XG4gICAgICAgICAgaXNBdXRob3JpemVkOiBmYWxzZSxcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJJbnN1ZmZpY2llbnQgU2NvcGVcIixcbiAgICAgICAgICAgIGNsaWVudElkOiBlcnJvcj8udG9rZW4gPyBlcnJvci50b2tlbltcInN1YlwiXSA6IFwiXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zdWNjZWVkKGluc3VmZmljaWVudFNjb3BlKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmFpbHVyZSA9IHtcbiAgICAgICAgaXNBdXRob3JpemVkOiBmYWxzZSxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGNsaWVudElkOiBlcnJvcj8udG9rZW4gPyBlcnJvci50b2tlbltcInN1YlwiXSA6IFwiXCIsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zdWNjZWVkKGZhaWx1cmUpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlVG9rZW4odmFsaWRhdGlvbk9wdHM6IGFueSk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgYW55Pj4ge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuZ2V0UGVyc29uYUNsaWVudCgpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjbGllbnQudmFsaWRhdGVUb2tlbihcbiAgICAgICAgdmFsaWRhdGlvbk9wdHMsXG4gICAgICAgIChlcnJvcjogYW55LCBvazogYW55LCBkZWNvZGVkVG9rZW46IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICB0b2tlbjogZGVjb2RlZFRva2VuLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoZGVjb2RlZFRva2VuKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCcmVhayBkb3duIGFuIEFQSSBnYXRld2F5IG1ldGhvZCBBUk4gaW50byBpdCdzIGNvbnN0aXR1ZW50IHBhcnRzLlxuICAgKiBNZXRob2QgQVJOcyB0YWtlIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgKlxuICAgKiAgIGFybjphd3M6ZXhlY3V0ZS1hcGk6PFJlZ2lvbiBpZD46PEFjY291bnQgaWQ+OjxBUEkgaWQ+LzxTdGFnZT4vPE1ldGhvZD4vPFJlc291cmNlIHBhdGg+XG4gICAqXG4gICAqIGUuZzpcbiAgICpcbiAgICogICBhcm46YXdzOmV4ZWN1dGUtYXBpOmV1LXdlc3QtMToxMjM6YWJjL2RldmVsb3BtZW50L0dFVC8yL3dvcmtzXG4gICAqXG4gICAqIEBwYXJhbSBtZXRob2RBcm4ge3N0cmluZ30gVGhlIG1ldGhvZCBBUk4gcHJvdmlkZWQgYnkgdGhlIGV2ZW50IGhhbmRlZCB0byBhIExhbWJkYSBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7e1xuICAgKiAgIG1ldGhvZDogc3RyaW5nLFxuICAgKiAgIHJlc291cmNlUGF0aDogc3RyaW5nLFxuICAgKiAgIGFwaU9wdGlvbnM6IHtcbiAgICogICAgIHJlZ2lvbjogc3RyaW5nLFxuICAgKiAgICAgcmVzdEFwaUlkOiBzdHJpbmcsXG4gICAqICAgICBzdGFnZTogc3RyaW5nXG4gICAqICAgfSxcbiAgICogICBhd3NBY2NvdW50SWQ6IHN0cmluZ1xuICAgKiAgIH19XG4gICAqL1xuICBwYXJzZU1ldGhvZEFybihtZXRob2RBcm46IHN0cmluZyk6IFBhcnNlZEFybiB7XG4gICAgY29uc3QgbWV0aG9kQXJuUGFydHMgPSBtZXRob2RBcm4uc3BsaXQoXCI6XCIpO1xuICAgIGNvbnNvbGUubG9nKGBNZXRob2QgQVJOIFBhcnRzOiAke0pTT04uc3RyaW5naWZ5KG1ldGhvZEFyblBhcnRzKX1gKTtcbiAgICBsZXQgYXBpR2F0ZXdheUFybiA9IG1ldGhvZEFyblBhcnRzW0FQSV9HQVRFV0FZX0FSTl9JTkRFWF07XG4gICAgLy8gSWYgdGhlIHNwbGl0IGNyZWF0ZWQgbW9yZSB0aGFuIHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcGFydHMsIHRoZW4gdGhlXG4gICAgLy8gYXBpR2F0ZXdheUFybiBtdXN0IGhhdmUgaGFkIG9uZSBvciBtb3JlIDoncyBpbiBpdC4gUmVjcmVhdGUgdGhlIGFwaUdhdGV3YXkgYXJuLlxuICAgIGZvciAoXG4gICAgICBsZXQgaW5kZXggPSBNRVRIT0RfQVJOX0lOREVYRVMubGVuZ3RoO1xuICAgICAgaW5kZXggPCBtZXRob2RBcm5QYXJ0cy5sZW5ndGg7XG4gICAgICBpbmRleCArPSAxXG4gICAgKSB7XG4gICAgICBhcGlHYXRld2F5QXJuICs9IGA6JHttZXRob2RBcm5QYXJ0c1tpbmRleF19YDtcbiAgICB9XG5cbiAgICBjb25zdCBhcGlHYXRld2F5QXJuUGFydHMgPSBhcGlHYXRld2F5QXJuLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zb2xlLmxvZyhgYXBpIGdhdGV3YXkgYXJuIHBhcnRzOiAke0pTT04uc3RyaW5naWZ5KGFwaUdhdGV3YXlBcm5QYXJ0cyl9YCk7XG5cbiAgICAvLyBJZiB0aGUgc3BsaXQgY3JlYXRlZCBtb3JlIHRoYW4gdGhlIGV4cGVjdGVkIG51bWJlciBvZiBwYXJ0cywgdGhlbiB0aGVcbiAgICAvLyByZXNvdXJjZSBwYXRoIG11c3QgaGF2ZSBoYWQgb25lIG9yIG1vcmUgLydzIGluIGl0LiBSZWNyZWF0ZSB0aGUgcmVzb3VyY2UgcGF0aC5cbiAgICBsZXQgcmVzb3VyY2VQYXRoID0gXCJcIjtcbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSBBUElfR0FURVdBWV9BUk5fSU5ERVhFUy5sZW5ndGggLSAxO1xuICAgICAgaSA8IGFwaUdhdGV3YXlBcm5QYXJ0cy5sZW5ndGg7XG4gICAgICBpICs9IDFcbiAgICApIHtcbiAgICAgIHJlc291cmNlUGF0aCArPSBgLyR7YXBpR2F0ZXdheUFyblBhcnRzW2ldfWA7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGByZXNvdXJjZSBwYXRoOiAke0pTT04uc3RyaW5naWZ5KHJlc291cmNlUGF0aCl9YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogYXBpR2F0ZXdheUFyblBhcnRzW01FVEhPRF9JTkRFWF0sXG4gICAgICByZXNvdXJjZVBhdGgsXG4gICAgICBhcGlPcHRpb25zOiB7XG4gICAgICAgIHJlZ2lvbjogbWV0aG9kQXJuUGFydHNbUkVHSU9OX0lOREVYXSxcbiAgICAgICAgcmVzdEFwaUlkOiBhcGlHYXRld2F5QXJuUGFydHNbQVBJX0lEX0lOREVYXSxcbiAgICAgICAgc3RhZ2U6IGFwaUdhdGV3YXlBcm5QYXJ0c1tTVEFHRV9JTkRFWF0sXG4gICAgICB9LFxuICAgICAgYXdzQWNjb3VudElkOiBtZXRob2RBcm5QYXJ0c1tBQ0NPVU5UX0lEX0lOREVYXSxcbiAgICB9O1xuICB9XG5cbiAgZ2V0U2NvcGUocGFyc2VkTWV0aG9kQXJuOiBQYXJzZWRBcm4pIHtcbiAgICBjb25zdCBzY29wZUNvbmZpZyA9IHByb2Nlc3MuZW52W1wiU0NPUEVfQ09ORklHXCJdO1xuICAgIGlmIChzY29wZUNvbmZpZyAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGNvbmYgPSBKU09OLnBhcnNlKHNjb3BlQ29uZmlnKTtcbiAgICAgIGZvciAoY29uc3QgcGF0aCBvZiBPYmplY3Qua2V5cyhjb25mKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgTG9vcGluZzogcGF0aDogJHtwYXRofSBwYXJzZWRNZXRob2RBcm4ucmVzb3VyY2VQYXRoOiAke3BhcnNlZE1ldGhvZEFybi5yZXNvdXJjZVBhdGh9YCk7XG4gICAgICAgIGlmICh0aGlzLnBhdGhNYXRjaChwYXRoLCBwYXJzZWRNZXRob2RBcm4ucmVzb3VyY2VQYXRoKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBTY29wZSByZXF1aXJlZDogJHtjb25mW3BhdGhdfWApXG4gICAgICAgICAgcmV0dXJuIGNvbmZbcGF0aF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coJ05vIHNjb3BlJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRQZXJzb25hQ2xpZW50KCkge1xuICAgIGlmICh0aGlzLnBlcnNvbmFDbGllbnQgPT0gbnVsbCkge1xuICAgICAgY29uc3QgcGVyc29uYUNvbmZpZyA9IHtcbiAgICAgICAgcGVyc29uYV9ob3N0OiBwcm9jZXNzLmVudltcIlBFUlNPTkFfSE9TVFwiXSxcbiAgICAgICAgcGVyc29uYV9zY2hlbWU6IHByb2Nlc3MuZW52W1wiUEVSU09OQV9TQ0hFTUVcIl0sXG4gICAgICAgIHBlcnNvbmFfcG9ydDogcHJvY2Vzcy5lbnZbXCJQRVJTT05BX1BPUlRcIl0sXG4gICAgICAgIHBlcnNvbmFfb2F1dGhfcm91dGU6IHByb2Nlc3MuZW52W1wiUEVSU09OQV9PQVVUSF9ST1VURVwiXSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMucGVyc29uYUNsaWVudCA9IHBlcnNvbmEuY3JlYXRlQ2xpZW50KFxuICAgICAgICBgJHtwcm9jZXNzLmVudltcIlBFUlNPTkFfQ0xJRU5UX05BTUVcIl19IChsYW1iZGE7IE5PREVfRU5WPSR7cHJvY2Vzcy5lbnZbXCJOT0RFX0VOVlwiXX0pYCxcbiAgICAgICAgXy5tZXJnZShwZXJzb25hQ29uZmlnLCB7fSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGVyc29uYUNsaWVudDtcbiAgfVxuXG4gIHBhdGhNYXRjaChwYXRoRGVmaW5hdGlvbjogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIDogYm9vbGVhbiB7XG4gICAgY29uc3QgcGF0aERlZmluYXRpb25QYXJ0cyA9IHBhdGhEZWZpbmF0aW9uLnNwbGl0KCcvJyk7XG4gICAgY29uc3QgcGF0aFBhcnRzID0gcGF0aERlZmluYXRpb24uc3BsaXQoJy8nKTtcblxuICAgIGlmIChwYXRoRGVmaW5hdGlvblBhcnRzLmxlbmd0aCAhPSBwYXRoUGFydHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoRGVmaW5hdGlvblBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXRoRGVmaW5pdGlvblNlZ21lbnQgPSBwYXRoRGVmaW5hdGlvblBhcnRzW2ldO1xuICAgICAgY29uc3QgcGF0aFNlZ21lbnQgPSBwYXRoUGFydHNbaV07XG5cbiAgICAgIGlmIChwYXRoRGVmaW5hdGlvbi5zdGFydHNXaXRoKCd7JykgJiYgcGF0aERlZmluYXRpb24uZW5kc1dpdGgoJ30nKSkge1xuICAgICAgICAvLyBNYXRjaGVzIHBhdGggYXJndW1lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNob3VsZCBtYXRjaCBkaXJlY3RseVxuICAgICAgICBpZiAocGF0aERlZmluaXRpb25TZWdtZW50ICE9PSBwYXRoU2VnbWVudCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLnZhbGlkYXRlVG9rZW4gPSBhc3luYyAoZXZlbnQ6IGFueSwgY29udGV4dDogYW55KSA9PiB7XG4gIGNvbnN0IHJvdXRlID0gbmV3IFBlcnNvbmFBdXRob3JpemVyKGV2ZW50LCBjb250ZXh0KTtcbiAgcmV0dXJuIGF3YWl0IHJvdXRlLmhhbmRsZSgpO1xufTtcbiJdfQ==